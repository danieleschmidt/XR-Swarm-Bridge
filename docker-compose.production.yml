# Production deployment configuration for XR-Swarm-Bridge
version: '3.8'

networks:
  xr-swarm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

services:
  # Frontend - React App
  frontend:
    build:
      context: ./webapp
      dockerfile: Dockerfile.prod
    ports:
      - "443:443"  # HTTPS
      - "80:80"    # HTTP redirect
    environment:
      - NODE_ENV=production
      - REACT_APP_WEBRTC_SERVER_URL=wss://api.xr-swarm.local:8443
      - REACT_APP_WEBRTC_SERVER_SSL=true
      - REACT_APP_MAX_AGENTS=1000
      - REACT_APP_DEBUG_MODE=false
    volumes:
      - ./ssl:/etc/ssl/certs
    networks:
      - xr-swarm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # ROS 2 Backend Services
  ros2-coordinator:
    build:
      context: ./ros2_ws
      dockerfile: Dockerfile.coordinator
    environment:
      - ROS_DOMAIN_ID=0
      - RMW_IMPLEMENTATION=rmw_cyclonedx_cpp
      - CYCLONEDX_URI=coordinator
    volumes:
      - /dev/shm:/dev/shm
      - ./config:/app/config:ro
      - ./logs:/app/logs
    networks:
      - xr-swarm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "ros2", "node", "list"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '2'
          memory: 2G

  # WebRTC Bridge
  webrtc-bridge:
    build:
      context: ./ros2_ws
      dockerfile: Dockerfile.webrtc
    ports:
      - "8443:8443"  # WebRTC signaling
      - "3478:3478/udp"  # STUN
      - "5349:5349/tcp"  # TURN TCP
      - "5349:5349/udp"  # TURN UDP
      - "49152-49252:49152-49252/udp"  # RTP/RTCP
    environment:
      - WEBRTC_SSL_CERT=/etc/ssl/certs/server.crt
      - WEBRTC_SSL_KEY=/etc/ssl/private/server.key
      - STUN_SERVER=stun:stun.l.google.com:19302
      - TURN_SERVER=turn:turn.xr-swarm.local:3478
    volumes:
      - ./ssl:/etc/ssl/certs:ro
      - ./ssl:/etc/ssl/private:ro
      - ./logs:/app/logs
    networks:
      - xr-swarm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8443"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '6'
          memory: 8G
        reservations:
          cpus: '3'
          memory: 4G

  # Health Monitor
  health-monitor:
    build:
      context: ./ros2_ws
      dockerfile: Dockerfile.health
    environment:
      - ROS_DOMAIN_ID=0
      - MONITOR_INTERVAL=5
      - RECOVERY_ENABLED=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs:/app/logs
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    networks:
      - xr-swarm-network
    restart: unless-stopped
    privileged: true
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Database for persistent storage
  database:
    image: timescale/timescaledb:latest-pg14
    environment:
      - POSTGRES_DB=xr_swarm
      - POSTGRES_USER=swarm_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - xr-swarm-network
    restart: unless-stopped
    secrets:
      - db_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U swarm_user -d xr_swarm"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - xr-swarm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Monitoring and Observability
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - xr-swarm-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=database:5432
      - GF_DATABASE_NAME=xr_swarm
      - GF_DATABASE_USER=swarm_user
      - GF_DATABASE_PASSWORD_FILE=/run/secrets/db_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - xr-swarm-network
    restart: unless-stopped
    secrets:
      - grafana_password
      - db_password
    depends_on:
      - database
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Log aggregation
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - xr-swarm-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./logs:/var/log:ro
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    networks:
      - xr-swarm-network
    restart: unless-stopped
    depends_on:
      - loki

  # Reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - xr-swarm-network
    restart: unless-stopped
    depends_on:
      - frontend
      - webrtc-bridge
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

# Persistent volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  loki_data:
    driver: local

# Secrets for sensitive data
secrets:
  db_password:
    file: ./secrets/db_password.txt
  grafana_password:
    file: ./secrets/grafana_password.txt
  redis_password:
    file: ./secrets/redis_password.txt