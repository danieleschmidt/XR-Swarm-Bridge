name: XR-Swarm-Bridge CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ created ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Pre-flight checks
  pre-flight:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.changes.outputs.should-build }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            should-build:
              - 'ros2_ws/**'
              - 'webapp/**'
              - 'scripts/**'
              - 'Dockerfile*'
              - '.github/workflows/**'
      
      - name: Generate version
        id: version
        run: |
          if [[ ${{ github.event_name }} == 'release' ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=dev-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          fi

  # ROS 2 Package Tests
  ros-tests:
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.should-build == 'true'
    
    strategy:
      matrix:
        ros-distro: [humble]
        
    container:
      image: ros:${{ matrix.ros-distro }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup ROS workspace
        run: |
          apt-get update && apt-get install -y \
            python3-pip \
            python3-colcon-common-extensions \
            python3-rosdep \
            python3-vcstool
          
          # Initialize rosdep
          rosdep init || true
          rosdep update
      
      - name: Install Python dependencies
        run: |
          pip3 install \
            websockets \
            opencv-python-headless \
            numpy \
            psutil
      
      - name: Build ROS packages
        run: |
          cd ros2_ws
          source /opt/ros/${{ matrix.ros-distro }}/setup.bash
          
          # Install dependencies
          rosdep install --from-paths src --ignore-src -r -y || true
          
          # Build packages
          colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release
      
      - name: Run ROS tests
        run: |
          cd ros2_ws
          source /opt/ros/${{ matrix.ros-distro }}/setup.bash
          source install/setup.bash
          
          # Run package tests
          colcon test --packages-select xr_swarm_core robot_agents webrtc_bridge
          
          # Show test results
          colcon test-result --verbose
      
      - name: Upload ROS test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ros-test-results-${{ matrix.ros-distro }}
          path: ros2_ws/log/

  # Webapp Tests
  webapp-tests:
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.should-build == 'true'
    
    strategy:
      matrix:
        node-version: [18, 20]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: webapp/package-lock.json
      
      - name: Install dependencies
        run: |
          cd webapp
          npm ci
      
      - name: Run type checking
        run: |
          cd webapp
          npm run typecheck
      
      - name: Run linting
        run: |
          cd webapp
          npm run lint
      
      - name: Run unit tests
        run: |
          cd webapp
          npm run test -- --coverage --reporter=json --outputFile=test-results.json
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: webapp-test-results-node${{ matrix.node-version }}
          path: |
            webapp/coverage/
            webapp/test-results.json
      
      - name: Build webapp
        run: |
          cd webapp
          npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: webapp-build-node${{ matrix.node-version }}
          path: webapp/dist/

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.should-build == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Code Quality Analysis
  code-quality:
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.should-build == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Docker Build
  docker-build:
    runs-on: ubuntu-latest
    needs: [pre-flight, ros-tests, webapp-tests]
    if: needs.pre-flight.outputs.should-build == 'true'
    
    strategy:
      matrix:
        component: [swarm-coordinator, webrtc-bridge, webapp, drone-agent]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/${{ matrix.component }}.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: needs.pre-flight.outputs.should-build == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: swarm_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
      
      - name: Run integration tests
        run: |
          # Override images to use locally built ones
          export SWARM_COORDINATOR_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/swarm-coordinator:${{ github.sha }}
          export WEBRTC_BRIDGE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/webrtc-bridge:${{ github.sha }}
          export WEBAPP_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/webapp:${{ github.sha }}
          
          # Start test environment
          docker-compose -f docker-compose.test.yml up -d
          
          # Wait for services to be ready
          sleep 30
          
          # Run integration tests
          ./scripts/run_integration_tests.sh
      
      - name: Collect logs
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml logs > integration-test-logs.txt
      
      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: |
            integration-test-logs.txt
            test_results/

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'release' || contains(github.event.pull_request.labels.*.name, 'performance')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup K6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Run performance tests
        run: |
          # Start test environment
          docker-compose -f docker-compose.test.yml up -d
          sleep 30
          
          # Run load tests
          k6 run --out json=performance-results.json tests/performance/load-test.js
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: performance-results.json

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
      
      - name: Deploy to staging
        run: |
          # Update image tags in manifests
          sed -i "s|image: .*swarm-coordinator:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/swarm-coordinator:${{ github.sha }}|" k8s/staging/*.yaml
          sed -i "s|image: .*webrtc-bridge:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/webrtc-bridge:${{ github.sha }}|" k8s/staging/*.yaml
          sed -i "s|image: .*webapp:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/webapp:${{ github.sha }}|" k8s/staging/*.yaml
          
          # Apply manifests
          kubectl apply -f k8s/staging/
          
          # Wait for rollout
          kubectl rollout status deployment/swarm-coordinator -n staging --timeout=300s
          kubectl rollout status deployment/webrtc-bridge -n staging --timeout=300s
          kubectl rollout status deployment/webapp -n staging --timeout=300s
      
      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 60
          
          # Run basic health checks
          ./scripts/smoke_tests.sh staging

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests]
    if: github.event_name == 'release'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
      
      - name: Deploy to production
        run: |
          # Update image tags with release version
          VERSION=${{ needs.pre-flight.outputs.version }}
          sed -i "s|image: .*swarm-coordinator:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/swarm-coordinator:${VERSION}|" k8s/production/*.yaml
          sed -i "s|image: .*webrtc-bridge:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/webrtc-bridge:${VERSION}|" k8s/production/*.yaml
          sed -i "s|image: .*webapp:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/webapp:${VERSION}|" k8s/production/*.yaml
          
          # Apply manifests with blue-green deployment
          kubectl apply -f k8s/production/
          
          # Wait for rollout
          kubectl rollout status deployment/swarm-coordinator -n production --timeout=600s
          kubectl rollout status deployment/webrtc-bridge -n production --timeout=600s
          kubectl rollout status deployment/webapp -n production --timeout=600s
      
      - name: Run production health checks
        run: |
          # Wait for services to be ready
          sleep 120
          
          # Run comprehensive health checks
          ./scripts/health_check.sh production
      
      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: "🚀 XR-Swarm-Bridge ${{ needs.pre-flight.outputs.version }} deployed to production successfully!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: "❌ XR-Swarm-Bridge ${{ needs.pre-flight.outputs.version }} deployment to production failed!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Cleanup old images
        run: |
          # Keep only last 10 images per component
          echo "Cleanup would remove old container images here"
          # Implementation would use GitHub Packages API to clean up old images

# Workflow Summary
  summary:
    runs-on: ubuntu-latest
    needs: [ros-tests, webapp-tests, security-scan, code-quality, integration-tests]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "## XR-Swarm-Bridge CI/CD Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| ROS Tests | ${{ needs.ros-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Webapp Tests | ${{ needs.webapp-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY